/*
Вказівник - інструмент, який дозволяє працювати з ділянками пам’яті пристрою.
Кожна змінна в програмі – це об'єкт, що має ім'я та значення.
До цього значення можна звернутися та отримати його по імені змінної.
Ця змінна в свою чергу десь міститься в пам’яті комп’ютера і адреса пам’яті цієї змінної
теж має певне значення (зазвичай довге беззнакове ціле).
Вказівник - це змінна, значення якої є адресою (тобто місцем в пам'яті) певній змінній.
Іншими словами, вказівник - це символічне представлення адреси змінної в пам’яті.
Для виділення пам’яті вказівнику можна використовувати такі стандартні функції:
void* malloc( size_t size ); - виділення пам’яті
void* calloc( size_t num, size_t size ); - ініціалізація виділеної пам’яті
void *realloc( void *ptr, size_t new_size ); - перерозподіл пам’яті
Для звільнення виділеної пам’яті крім realloc використовується команда free, яка визначена в <stdlib.h>:
void free( void* ptr );
Існують наступні операції з вказівниками:
- декларація змінної вказівника;
- присвоєння значення або ініціалізація;
- присвоєння адреси змінній вказівника (оператор &);
- отримання значення (розіменування) за адресою, доступною в вказівнику;
- арифметичні операції:
    o інкремент вказівника та додавання цілого числа до вказівника;
    o декремент вказівника та віднімання цілого числа від вказівника;
    o порівняння вказівників.
*/

#include <stdio.h>
#include <stdlib.h>

int main()
{
    printf("n: ");
    int n;
    scanf_s("%i", &n);
    printf("m: ");
    int m;
    scanf_s("%i", &m);

    /*Створення масиву та виділення пам'яті*/
    int* arr = (int*)malloc(n * m * sizeof(int));

    /*Введення масиву*/
    for (int i = 0; i < n; ++i)
    {
        for (int j = 0; j < m; ++j)
        {
            printf("Array[%d][%d] = ", i, j);
            scanf_s("%d", (arr + i * m + j));
        }
    }

    /*Виведення масиву*/
    for (int i = 0; i < n; ++i)
    {
        for (int j = 0; j < m; ++j)
        {
            printf(" %d ", *(arr + i * m + j));
        }
        printf("\n");
    }

    /*Звільнення пам'яті*/
    free(arr);

    return 0;
}